<html>
	<head>
		<title>Actionscript/Javascript Test</title>
		<script src="./swfobject.js" type="text/javascript"></script>
		<script src="./jsmath.js" type="text/javascript"></script>
		<style type="text/css">
			#form1{float:left; padding:10px;}
			#formTxt{float:left; padding:10px;}
			#form2{float:left; padding:10px;}
		    #flash{position:relative;}
		</style>
		<script>

            //function gets the flash movie so that functions can be called on it
			function getFlashMovie(movieName) {
				var isIE = navigator.appName.indexOf("Microsoft") != -1;
				return (isIE) ? window[movieName] : document[movieName];
			}

            //loads both data sets and then calls update which loops from then on
            function start(){
                loadLarge();
                loadSmall();
                swap();
                update();
            }

            //these are used for controlling rotation of the camera
            var xRot=0;
            var yRot=0;
            var rotSpeed=0.1;
            //this is called by start and then calls itself.  It sets up the camera
            //and then calls render on the flash file
            function update(){
                //handle key presses
                if(keys[40])xRot+=rotSpeed;
                if(keys[38])xRot-=rotSpeed;
                if(keys[37])yRot-=rotSpeed;
                if(keys[39])yRot+=rotSpeed;
                //this is the matrix for a rotation in x and y plus the perspective matrix
				var rotXmat = Matrix4x4.createRotationX(xRot);
				var rotYmat = Matrix4x4.createRotationY(yRot);
				var proj = GraphicsHelper.createPerspectiveOGL(1.6, 1, 0.1, 600, new Vector2(0,0));
				var mat = proj.multiply(rotXmat.multiply(rotYmat));

                var f = getFlashMovie(flash);
                f.setViewProjectionMatrix(mat.flattenRowMajor());
                //render the scene
                f.render();
                //call update again in 0.03 seconds
                setTimeout("update()", 30);
            }


            //large holds the renderables of the large data set and small the small
            //active holds which data set is currently displayed
            //flash is the name of the flash object so we can retrieve it
            var large= new Array();
            var small=new Array();
            var active=new Array();
            var flash = "SFRAPI";
            var largeActive = false;
            //swap removes whichever renderable set is currently visible and then
            //add whichever set is not visible
            function swap(){
                var f = getFlashMovie(flash);
                largeActive=!largeActive;
                for(var i=0;i<active.length;i++){
                    f.removeRenderable(active[i]);
                }
                if(active==large)active=small;
                else active=large;
                for(var i=0;i<active.length;i++){
                    f.addRenderable(active[i]);
                }
            }

            //animates the current renderable set
            function animate(){
                var f = getFlashMovie(flash);


                var startProperties = new Object;
                var endProperties = new Object;
                //these get the name, start, and end values of the things to animate
                var start =parseFloat(document.getElementById("animationText").tran1Start.value);
                var end = parseFloat(document.getElementById("animationText").tran1End.value);
                var property = document.getElementById("animationText").tran1Name.value;
                startProperties[property]=start;
                endProperties[property]=end;
                start =parseFloat(document.getElementById("animationText").tran2Start.value);
                end = parseFloat(document.getElementById("animationText").tran2End.value);
                property = document.getElementById("animationText").tran2Name.value;
                startProperties[property]=start;
                endProperties[property]=end;

                //call animate renderable on all the renderables using the inputted
                //start and end values
                for(var i=0;i<active.length;i++){
                   f.animateRenderable(active[i],startProperties,endProperties,5,"ease");
                }
            }

            //read the small data set in and create renderables out of it
            function loadSmall(){
                var f = getFlashMovie(flash);
                //read in the lobby.txt and parse it into an array
                var data = f.getDataSmall();
                var obj = data.split(";");
                for(var i=0;i<obj.length;i++){
                    obj[i]=obj[i].split(":");
                }
                for(var i=0;i<obj.length;i++){
                    //width and height are -1 because we want to use the textures width
                    //and height
                    var height=-1;
                    var width= -1;
                    //get the transform out of the array
                    var tran= obj[i].slice(1,1+16);
                    //create a renderable using the read in data, make it a 4x4 renderable
                    //so that clipping works nicely
                    var rend = f.createTexturedGridRenderable(width,height,4,4,tran,"./data/lobby/"+obj[i][obj[i].length-1],true);
                    small[i]=rend;
                }

            }

            //keys keeps track of which keys are pressed
            var keys= new Array();
            document.onkeyup = function(event) {
                var keyCode;
                if(event == null)
                {
                    keyCode = window.event.keyCode;
                }
                else
                {
                    keyCode = event.keyCode;
                }
                keys[keyCode]=false;
                console.log("animation started");
            }

            document.onkeydown = function(event) {
                var keyCode;
                if(event == null)
                {
                    keyCode = window.event.keyCode;
                }
                else
                {
                    keyCode = event.keyCode;
                }
                keys[keyCode]=true;
            }

            //load the large set of data
            function loadLarge() {
                var f = getFlashMovie(flash);
                //read in and parse lobby-hi.txt into an array
                var data = f.getData();
                var obj = data.split(";");
                for(var i=0;i<obj.length;i++){
                    obj[i]=obj[i].split(":");
                }

                var height=-1;/// (obj[i][3]);
                var width= -1;///(obj[i][1]);
                var order= 1000;
                var rend;
                for(var i=0;i<obj.length;i++){
                    //read the transform out of the array
                    var tranArray= obj[i].slice(1,1+16);
                    //creat the transform
                    var tran = f.createTransform(tranArray);

                    //choose randomly to load teh texture now or not
                    var loadNow = Math.random()<0.5;
                    //creat the texture
                    var text = f.createTexture("./data/lobby/"+obj[i][obj[i].length-1],loadNow);
                    //if the texture is not fetched (50% chance from whether we set
                    //loadNow or not) then fetch it
                    if(!f.isTextureFetched(text))f.loadTexture(text);
                    //create the geometry
                    var geom = f.createGeometry([0,0,0, width,0,0, 0,height,0, width,height,0],[0,0, 1,0, 0,1, 1,1],[0,1,2,3],1);
                    //create the renderable using the geometry,texture,and transform
                    //we created.  Order is set so that those created first have
                    //a higher order number so will appear on top if sort by order
                    //is turned on
                    rend = f.createRenderable(geom,text,tran,order,false,true);
                    order--;
                    large[i]=rend;
                }

            }

            //these three functions/values handle setting the options
            var face=true;
            var or=false;
            var antal = true;
            function backfaceCulling(){
                var f = getFlashMovie(flash);
                face=!face;
                f.setRenderingOptions({backface_culling:face});
            }
            function order(){
                var f = getFlashMovie(flash);
                or=!or;
                f.setRenderingOptions({sort_by_order:or});
            }
            function antialias(){
                var f = getFlashMovie(flash);
                antal=!antal;
                f.setRenderingOptions({antialias:antal});
            }


		</script>

	</head>

	<body>
		<div id="flash">
			Flash content goes here.
		</div>
		<script>
			var so = new SWFObject('demo.swf', 'SFRAPI', '600','600', '9.0', '#FFFFFF');
			so.write("flash");
		</script>


		<form action="javascript:swap()" id="form2">
		    <input type="submit" value="swap" />
		</form>
		<form action="javascript:start()" id="form3">
		    <input type="submit" value="start" />
		</form>
		<form action="javascript:animate()" id="form4">
		    <input type="submit" value="animate" />
		</form>
		<form action="javascript:backfaceCulling()" id="form5">
		    <input type="submit" value="set backface culling" />
		</form>
		<form action="javascript:order()" id="form6">
		    <input type="submit" value="set order" />
		</form>
		<form action="javascript:antialias()" id="form7">
		    <input type="submit" value="set antialias" />
		</form>
        <br/>
        <form id="animationText">
            name
            <input type="text" name="tran1Name"/>
            start
            <input type="text" name="tran1Start"/>
            end
            <input type="text" name="tran1End"/>
            <br/>
            name
            <input type="text" name="tran2Name"/>
            start
            <input type="text" name="tran2Start"/>
            end
            <input type="text" name="tran2End"/>
        </form>
        <br/>
		<p id="formTxt">Load loads the images and creates renderables.  Start calls render and
        handles key presses.  Once you click start it will loop 10 times a second.  Swap swaps
        between the hidef cube and the lowdef cube.  The low def cube is what is started with.</p>


	</body>
</html>
